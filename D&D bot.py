import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from httpx import AsyncClient
from aiogram.utils.keyboard import ReplyKeyboardBuilder


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


bot = Bot(token="–≤–∞—à —Ç–æ–∫–µ–Ω")
dp = Dispatcher()


# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
class ScenarioState:
    def __init__(self):
        self.theme = None
        self.level = None
        self.length = None
        self.style = None
        self.additional_info = None


# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


@dp.message(Command("start"))
async def cmd_start(message: types.Message):

    builder = ReplyKeyboardBuilder()

    builder.row(
        types.KeyboardButton(text="üÜï –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"),
        types.KeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
    )
    builder.row(types.KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"))

    await message.answer(
        "üé≤ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è D&D!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –∫–∞–º–ø–∞–Ω–∏–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
        parse_mode="Markdown"
    )


@dp.message(lambda message: message.text in ["üÜï –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"])
async def handle_main_buttons(message: types.Message):
    if message.text == "üÜï –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π":
        await cmd_new_scenario(message)
    elif message.text == "‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π":
        await cmd_quick_scenario(message)
    elif message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await cmd_help(message)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üìñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "*/new_scenario* - –ø–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
        "*/quick_scenario* - –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n\n"
        "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GPT4Free –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ—ç—Ç–æ–º—É –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )
    await message.answer(help_text, parse_mode="Markdown")


@dp.message(Command("new_scenario"))
async def cmd_new_scenario(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = ScenarioState()

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–§—ç–Ω—Ç–µ–∑–∏"), types.KeyboardButton(text="–°—Ç–∏–º–ø–∞–Ω–∫")],
            [types.KeyboardButton(text="–ö–∏–±–µ—Ä–ø–∞–Ω–∫"), types.KeyboardButton(text="–•–æ—Ä—Ä–æ—Ä")],
            [types.KeyboardButton(text="–î—Ä—É–≥–æ–µ")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "üé≠ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—è:*\n\n"
        "1. –§—ç–Ω—Ç–µ–∑–∏ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –º–∏—Ä–µ –º–∞–≥–∏–∏ –∏ –º–µ—á–µ–π\n"
        "2. –°—Ç–∏–º–ø–∞–Ω–∫ - —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–∞–≥–∏—è –ø–∞—Ä–∞\n"
        "3. –ö–∏–±–µ—Ä–ø–∞–Ω–∫ - –≤—ã—Å–æ–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –Ω–∏–∑–∫–∞—è –∂–∏–∑–Ω—å\n"
        "4. –•–æ—Ä—Ä–æ—Ä - –º—Ä–∞—á–Ω—ã–µ –∏ –ø—É–≥–∞—é—â–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è\n"
        "5. –î—Ä—É–≥–æ–µ - —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —Ç–µ–º—É",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
@dp.message(lambda message: message.text in ["–§—ç–Ω—Ç–µ–∑–∏", "–°—Ç–∏–º–ø–∞–Ω–∫", "–ö–∏–±–µ—Ä–ø–∞–Ω–∫", "–•–æ—Ä—Ä–æ—Ä", "–î—Ä—É–≥–æ–µ"])
async def process_theme(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /new_scenario")

    if message.text == "–î—Ä—É–≥–æ–µ":
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ç–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—è:")
        return

    user_states[user_id].theme = message.text

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ù–æ–≤–∏—á–æ–∫ (1-3 —É—Ä–æ–≤–µ–Ω—å)")],
            [types.KeyboardButton(text="–û–ø—ã—Ç–Ω—ã–π (4-10 —É—Ä–æ–≤–µ–Ω—å)")],
            [types.KeyboardButton(text="–í–µ—Ç–µ—Ä–∞–Ω (11-16 —É—Ä–æ–≤–µ–Ω—å)")],
            [types.KeyboardButton(text="–õ–µ–≥–µ–Ω–¥–∞ (17-20 —É—Ä–æ–≤–µ–Ω—å)")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "‚öîÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:*",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã
@dp.message(lambda message: user_states.get(message.from_user.id) and user_states[message.from_user.id].theme is None)
async def process_custom_theme(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id].theme = message.text

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ù–æ–≤–∏—á–æ–∫ (1-3 —É—Ä–æ–≤–µ–Ω—å)")],
            [types.KeyboardButton(text="–û–ø—ã—Ç–Ω—ã–π (4-10 —É—Ä–æ–≤–µ–Ω—å)")],
            [types.KeyboardButton(text="–í–µ—Ç–µ—Ä–∞–Ω (11-16 —É—Ä–æ–≤–µ–Ω—å)")],
            [types.KeyboardButton(text="–õ–µ–≥–µ–Ω–¥–∞ (17-20 —É—Ä–æ–≤–µ–Ω—å)")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "‚öîÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:*",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
@dp.message(lambda message: message.text in [
    "–ù–æ–≤–∏—á–æ–∫ (1-3 —É—Ä–æ–≤–µ–Ω—å)",
    "–û–ø—ã—Ç–Ω—ã–π (4-10 —É—Ä–æ–≤–µ–Ω—å)",
    "–í–µ—Ç–µ—Ä–∞–Ω (11-16 —É—Ä–æ–≤–µ–Ω—å)",
    "–õ–µ–≥–µ–Ω–¥–∞ (17-20 —É—Ä–æ–≤–µ–Ω—å)"
])
async def process_level(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or user_states[user_id].theme is None:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /new_scenario")

    user_states[user_id].level = message.text

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ö–æ—Ä–æ—Ç–∫–∏–π (1 —Å–µ—Å—Å–∏—è)")],
            [types.KeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π (2-3 —Å–µ—Å—Å–∏–∏)")],
            [types.KeyboardButton(text="–î–ª–∏–Ω–Ω—ã–π (4+ —Å–µ—Å—Å–∏–π)")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "‚è≥ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É —Å—Ü–µ–Ω–∞—Ä–∏—è:*",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã —Å—Ü–µ–Ω–∞—Ä–∏—è
@dp.message(lambda message: message.text in ["–ö–æ—Ä–æ—Ç–∫–∏–π (1 —Å–µ—Å—Å–∏—è)", "–°—Ä–µ–¥–Ω–∏–π (2-3 —Å–µ—Å—Å–∏–∏)", "–î–ª–∏–Ω–Ω—ã–π (4+ —Å–µ—Å—Å–∏–π)"])
async def process_length(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or user_states[user_id].level is None:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /new_scenario")

    user_states[user_id].length = message.text

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ë–æ–µ–≤–æ–π")],
            [types.KeyboardButton(text="–†–æ–ª–µ–≤–æ–π")],
            [types.KeyboardButton(text="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π")],
            [types.KeyboardButton(text="–°–º–µ—à–∞–Ω–Ω—ã–π")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "üé≠ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–≥—Ä—ã:*\n\n"
        "1. –ë–æ–µ–≤–æ–π - –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Å—Ä–∞–∂–µ–Ω–∏—è—Ö –∏ —Ç–∞–∫—Ç–∏–∫–µ\n"
        "2. –†–æ–ª–µ–≤–æ–π - –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –∏ –æ—Ç—ã–≥—Ä—ã—à–µ\n"
        "3. –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π - –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –∏–∑—É—á–µ–Ω–∏–∏ –º–∏—Ä–∞\n"
        "4. –°–º–µ—à–∞–Ω–Ω—ã–π - –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∏–≥—Ä—ã
@dp.message(lambda message: message.text in ["–ë–æ–µ–≤–æ–π", "–†–æ–ª–µ–≤–æ–π", "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π", "–°–º–µ—à–∞–Ω–Ω—ã–π"])
async def process_style(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or user_states[user_id].length is None:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /new_scenario")

    user_states[user_id].style = message.text

    await message.answer(
        "üí° *–ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è?*\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏, NPC, —Å—é–∂–µ—Ç–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ. "
        "–ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@dp.message(
    lambda message: user_states.get(message.from_user.id) and user_states[message.from_user.id].style is not None and
                    user_states[message.from_user.id].additional_info is None)
async def process_additional_info(message: types.Message):
    user_id = message.from_user.id
    state = user_states[user_id]

    if message.text.lower() != "–Ω–µ—Ç":
        state.additional_info = message.text

    # –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
    prompt = (
        f"–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è Dungeons & Dragons —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
        f"- –¢–µ–º–∞: {state.theme}\n"
        f"- –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {state.level}\n"
        f"- –î–ª–∏–Ω–∞: {state.length}\n"
        f"- –°—Ç–∏–ª—å –∏–≥—Ä—ã: {state.style}\n"
    )

    if state.additional_info:
        prompt += f"- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {state.additional_info}\n"

    prompt += (
        "\n–°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:\n"
        "1. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—é–∂–µ—Ç–∞ (1-2 –∞–±–∑–∞—Ü–∞)\n"
        "2. –û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n"
        "3. –ö–ª—é—á–µ–≤—ã—Ö NPC —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏\n"
        "4. –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—é–∂–µ—Ç–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã\n"
        "5. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è/—Å—Ä–∞–∂–µ–Ω–∏—è\n"
        "6. –ù–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n"
        "\n–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ Markdown-–¥–æ–∫—É–º–µ–Ω—Ç–∞."
    )

    await message.answer("ü™Ñ *–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ü–µ–Ω–∞—Ä–∏—è...* –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", parse_mode="Markdown")

    try:
        response = await gpt_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=2000
        )

        scenario_text = response.choices[0].message.content

        if len(scenario_text) > 4000:
            parts = [scenario_text[i:i + 4000] for i in range(0, len(scenario_text), 4000)]
            for part in parts:
                await message.answer(part, parse_mode="Markdown")
        else:
            await message.answer(scenario_text, parse_mode="Markdown")

        await message.answer("‚ú® *–°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤!* –•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã!", parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    del user_states[user_id]


@dp.message(Command("quick_scenario"))
async def cmd_quick_scenario(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–§—ç–Ω—Ç–µ–∑–∏"), types.KeyboardButton(text="–°—Ç–∏–º–ø–∞–Ω–∫")],
            [types.KeyboardButton(text="–ö–∏–±–µ—Ä–ø–∞–Ω–∫"), types.KeyboardButton(text="–•–æ—Ä—Ä–æ—Ä")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "üé≤ *–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è D&D*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
@dp.message(
    lambda message: message.text in ["–§—ç–Ω—Ç–µ–∑–∏", "–°—Ç–∏–º–ø–∞–Ω–∫", "–ö–∏–±–µ—Ä–ø–∞–Ω–∫", "–•–æ—Ä—Ä–æ—Ä"] and not message.text.startswith('/'))
async def process_quick_scenario(message: types.Message):
    theme = message.text

    await message.answer(
        f"ü™Ñ *–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {theme.lower()} —Å—Ü–µ–Ω–∞—Ä–∏—è...* –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove()
    )

    try:
        response = await gpt_client.chat.completions.create(
            model="gpt-4",
            messages=[{
                "role": "user",
                "content": (
                    f"–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è Dungeons & Dragons 5e –≤ {theme.lower()} —Å–µ—Ç—Ç–∏–Ω–≥–µ. "
                    "–°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:\n"
                    "1. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—é–∂–µ—Ç–∞ (1 –∞–±–∑–∞—Ü)\n"
                    "2. 2-3 –∫–ª—é—á–µ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏\n"
                    "3. 2-3 –≤–∞–∂–Ω—ã—Ö NPC\n"
                    "4. 1-2 –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ä–∞–∂–µ–Ω–∏—è\n"
                    "5. –ù–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n"
                    "\n–û—Ñ–æ—Ä–º–∏ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ Markdown."
                )
            }],
            temperature=0.7,
            max_tokens=1500
        )

        scenario_text = response.choices[0].message.content
        await message.answer(scenario_text, parse_mode="Markdown")
        await message.answer("‚ú® *–°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤!* –•–æ—Ä–æ—à–µ–π –∏–≥—Ä—ã!", parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())